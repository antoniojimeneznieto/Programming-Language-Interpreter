[0m[[0m[0mdebug[0m] [0m[0m[zinc] IncrementalCompile -----------[0m
[0m[[0m[0mdebug[0m] [0m[0mIncrementalCompile.incrementalCompile[0m
[0m[[0m[0mdebug[0m] [0m[0mprevious = Stamps for: 4 products, 4 sources, 2 libraries[0m
[0m[[0m[0mdebug[0m] [0m[0mcurrent source = Set(${BASE}/src/test/scala/amyc/TestUtils.scala, ${BASE}/src/test/scala/amyc/CompilerTest.scala, ${BASE}/src/test/scala/amyc/LexerTests.scala, ${BASE}/src/test/scala/amyc/TestSuite.scala, ${BASE}/src/test/scala/amyc/ParserTests.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m> initialChanges = InitialChanges(Changes(added = Set(${BASE}/src/test/scala/amyc/ParserTests.scala), removed = Set(), changed = Set(), unmodified = ...),Set(),Set(),API Changes: Set())[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	removed: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(${BASE}/src/test/scala/amyc/ParserTests.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(${BASE}/src/test/scala/amyc/ParserTests.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mcompilation cycle 1[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to /Users/anjim1/Desktop/CS320/cs320-group16/target/scala-3.1.3/test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mReturning already retrieved and compiled bridge: /Users/anjim1/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-sbt-bridge/3.1.3/scala3-sbt-bridge-3.1.3.jar.[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 677dc6c5 for Scala Compiler version 3.1.3[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-feature[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Users/anjim1/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.1.3/scala3-library_3-3.1.3.jar:/Users/anjim1/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.8/scala-library-2.13.8.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Users/anjim1/Desktop/CS320/cs320-group16/target/scala-3.1.3/test-classes:/Users/anjim1/Desktop/CS320/cs320-group16/target/scala-3.1.3/classes:/Users/anjim1/Desktop/CS320/cs320-group16/lib/silex_3-0.6.jar:/Users/anjim1/Desktop/CS320/cs320-group16/lib/scallion_3-0.6.jar:/Users/anjim1/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/novocode/junit-interface/0.11/junit-interface-0.11.jar:/Users/anjim1/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/junit/junit/4.11/junit-4.11.jar:/Users/anjim1/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-sbt/test-interface/1.0/test-interface-1.0.jar:/Users/anjim1/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 0.748252775 s[0m
[0m[[0m[0mdebug[0m] [0m[0mdone compiling[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from amyc.ParserTests...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: amyc.ParserTests[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(amyc.ParserTests)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(amyc.ParserTests,ModifiedNames(changes = UsedName(testClassDefError3,[Default]), UsedName(testErrorToken1,[Default]), UsedName(getResourcePath,[Default]), UsedName(shouldPass,[Default]), UsedName(demandFailure,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(shouldPass$default$2,[Default]), UsedName(testNestedMatch,[Default]), UsedName(isInstanceOf,[Default]), UsedName(testErrorToken2,[Default]), UsedName(testLiterals,[Default]), UsedName(testWrongQName3,[Default]), UsedName(testLL1,[Default]), UsedName(pipeline,[Default]), UsedName(compareOutputs$default$4,[Default]), UsedName(treePrinterN,[Default]), UsedName(demandFailure$default$3,[Default]), UsedName(clone,[Default]), UsedName(testWithRedirectedIO,[Default]), UsedName(testArgsError1,[Default]), UsedName(notifyAll,[Default]), UsedName(testChainedMatch,[Default]), UsedName(demandPass,[Default]), UsedName(TestUtils;init;,[Default]), UsedName(testMissingOperand,[Default]), UsedName(getClass,[Default]), UsedName(eq,[Default]), UsedName(compareOutputs,[Default]), UsedName(testCommentClosedTwice,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(testFunDefError2,[Default]), UsedName(testClassDefs,[Default]), UsedName(hashCode,[Default]), UsedName(ParserTests;init;,[Default]), UsedName(testUnaryWithinUnary,[Default]), UsedName(testEmpty,[Default]), UsedName(tmpDir,[Default]), UsedName(failing,[Default]), UsedName(testFunCalls,[Default]), UsedName(shouldOutput,[Default]), UsedName(testIfCondition,[Default]), UsedName($isInstanceOf,[Default]), UsedName(demandPass$default$3,[Default]), UsedName(testQualifiedNames,[Default]), UsedName(synchronized,[Default]), UsedName(testPrecedence,[Default]), UsedName(testWrongQName1,[Default]), UsedName(TestSuite;init;,[Default]), UsedName(testWrongQName4,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ParserTests,[Default]), UsedName(testIntError1,[Default]), UsedName(testClassDefError4,[Default]), UsedName(testParens,[Default]), UsedName(testValAsOperand,[Default]), UsedName(testMatchScrutinee,[Default]), UsedName(testAssoc,[Default]), UsedName(testUnmatchedModuleName,[Default]), UsedName(testClassDefError1,[Default]), UsedName(testUnmatchedModule,[Default]), UsedName(testList,[Default]), UsedName(testAssocSemicolon,[Default]), UsedName(baseDir,[Default]), UsedName(testValInVal,[Default]), UsedName(testFunDefError3,[Default]), UsedName(outputs,[Default]), UsedName(notify,[Default]), UsedName(wait,[Default]), UsedName(testFunDefError4,[Default]), UsedName(shouldFail$default$2,[Default]), UsedName(testEmptyFile,[Default]), UsedName(ne,[Default]), UsedName(outputExt,[Default]), UsedName(shouldOutput$default$3,[Default]), UsedName(testClassDefError2,[Default]), UsedName(##,[Default]), UsedName(testIntError3,[Default]), UsedName(testPatterns,[Default]), UsedName(testFunDefError1,[Default]), UsedName(Object;init;,[Default]), UsedName(testIfPrecedence,[Default]), UsedName(testValError,[Default]), UsedName(testWrongQName2,[Default]), UsedName(testMatchAsOperand,[Default]), UsedName(testArgsError2,[Default]), UsedName(passing,[Default]), UsedName(testFunDefError6,[Default]), UsedName(testTypeWidth,[Default]), UsedName(testIntError2,[Default]), UsedName(CompilerTest;init;,[Default]), UsedName(equals,[Default]), UsedName(testFunDefError5,[Default]), UsedName(testFunDefs,[Default]), UsedName(shouldFail,[Default]), UsedName(testUnmatchedParen,[Default]))) invalidates 1 classes due to The amyc.ParserTests has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(testClassDefError3,[Default]), UsedName(testErrorToken1,[Default]), UsedName(getResourcePath,[Default]), UsedName(shouldPass,[Default]), UsedName(demandFailure,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(shouldPass$default$2,[Default]), UsedName(testNestedMatch,[Default]), UsedName(isInstanceOf,[Default]), UsedName(testErrorToken2,[Default]), UsedName(testLiterals,[Default]), UsedName(testWrongQName3,[Default]), UsedName(testLL1,[Default]), UsedName(pipeline,[Default]), UsedName(compareOutputs$default$4,[Default]), UsedName(treePrinterN,[Default]), UsedName(demandFailure$default$3,[Default]), UsedName(clone,[Default]), UsedName(testWithRedirectedIO,[Default]), UsedName(testArgsError1,[Default]), UsedName(notifyAll,[Default]), UsedName(testChainedMatch,[Default]), UsedName(demandPass,[Default]), UsedName(TestUtils;init;,[Default]), UsedName(testMissingOperand,[Default]), UsedName(getClass,[Default]), UsedName(eq,[Default]), UsedName(compareOutputs,[Default]), UsedName(testCommentClosedTwice,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(testFunDefError2,[Default]), UsedName(testClassDefs,[Default]), UsedName(hashCode,[Default]), UsedName(ParserTests;init;,[Default]), UsedName(testUnaryWithinUnary,[Default]), UsedName(testEmpty,[Default]), UsedName(tmpDir,[Default]), UsedName(failing,[Default]), UsedName(testFunCalls,[Default]), UsedName(shouldOutput,[Default]), UsedName(testIfCondition,[Default]), UsedName($isInstanceOf,[Default]), UsedName(demandPass$default$3,[Default]), UsedName(testQualifiedNames,[Default]), UsedName(synchronized,[Default]), UsedName(testPrecedence,[Default]), UsedName(testWrongQName1,[Default]), UsedName(TestSuite;init;,[Default]), UsedName(testWrongQName4,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ParserTests,[Default]), UsedName(testIntError1,[Default]), UsedName(testClassDefError4,[Default]), UsedName(testParens,[Default]), UsedName(testValAsOperand,[Default]), UsedName(testMatchScrutinee,[Default]), UsedName(testAssoc,[Default]), UsedName(testUnmatchedModuleName,[Default]), UsedName(testClassDefError1,[Default]), UsedName(testUnmatchedModule,[Default]), UsedName(testList,[Default]), UsedName(testAssocSemicolon,[Default]), UsedName(baseDir,[Default]), UsedName(testValInVal,[Default]), UsedName(testFunDefError3,[Default]), UsedName(outputs,[Default]), UsedName(notify,[Default]), UsedName(wait,[Default]), UsedName(testFunDefError4,[Default]), UsedName(shouldFail$default$2,[Default]), UsedName(testEmptyFile,[Default]), UsedName(ne,[Default]), UsedName(outputExt,[Default]), UsedName(shouldOutput$default$3,[Default]), UsedName(testClassDefError2,[Default]), UsedName(##,[Default]), UsedName(testIntError3,[Default]), UsedName(testPatterns,[Default]), UsedName(testFunDefError1,[Default]), UsedName(Object;init;,[Default]), UsedName(testIfPrecedence,[Default]), UsedName(testValError,[Default]), UsedName(testWrongQName2,[Default]), UsedName(testMatchAsOperand,[Default]), UsedName(testArgsError2,[Default]), UsedName(passing,[Default]), UsedName(testFunDefError6,[Default]), UsedName(testTypeWidth,[Default]), UsedName(testIntError2,[Default]), UsedName(CompilerTest;init;,[Default]), UsedName(equals,[Default]), UsedName(testFunDefError5,[Default]), UsedName(testFunDefs,[Default]), UsedName(shouldFail,[Default]), UsedName(testUnmatchedParen,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(amyc.ParserTests)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0mFinal step, transitive dependencies:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
